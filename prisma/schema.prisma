// when ready add detail, see for inspo
// https://www.researchgate.net/profile/Shady-Hamouda/publication/335067480/figure/fig1/AS:880942646312960@1587044502394/Airbnb-schema-in-relational-database-https-createlycom-app-tempIDidbbu9op2.ppm
datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(cuid())
    fname         String?
    lname         String?
    name          String // used for auth
    username      String?
    email         String?         @unique
    phone         String?         @unique
    emailVerified DateTime?
    image         String?
    role          String          @default("user") // user, admin, host. Sqlite doesn't do enums
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    bookings         Booking[]
    reviews          Review[]
    notifications    Notification[]
    sentMessages     Message[]      @relation("sentMessages")
    receivedMessages Message[]      @relation("receivedMessages")
    hostUsers        HostUser[]
    images           Image[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

//  https://medium.com/towards-data-engineering/data-modelling-design-a-data-model-for-a-hotel-booking-system-like-airbnb-2110a6d079c6
// List denotes a string field of "" separated values.
model Property {
    id                       String            @id @default(cuid())
    status                   String            @default("draft") // 'published', 'draft', 'archived'
    email                    String?
    phone                    String?
    name                     String
    descShort                String?
    descList                 String?
    lat                      Float?
    lng                      Float?
    coordType                String? // exact or approximate
    city                     String?
    country                  String?
    address                  String? // street address, think about how to show international address types
    addressRaw               String? // the raw scraped address - think about best way to handle big ugly foreign addresses
    nearbyAirport            String? // manually pull this from nearbyPlaces field
    placeList                String? // a list of '\n' separated places
    policyList               String? // a string/list of misc policies
    tagList                  String? // | separated list of tags
    location                 String? // what is this field?
    type                     String? // Resort || Hotel || etc...
    amenityHealing           String?
    amenityCuisine           String?
    amenityActivity          String?
    amenityFacility          String?
    rating                   String? // sum of all ratings / reviewer count, ex: "187 / 842". When displayed, convert to numbers and do expression, when updated, convert to number and increment numerator by rating and denom by 1 (this would be a condensed rating system, real system would track all reviews)
    coverImg                 String? // must be hi-res (think of alternative design for pages with no hires img)
    checkInTime              String? // Check-in Time (Earliest)
    checkOutTime             String? // Check-out Time (Latest)
    frontDeskHours           String? // Front Desk Hours
    childrenAllowed          Boolean? // Children Allowed
    additionalFeeForChildren Int? // Additional Fees for Children
    extraBeds                Boolean? // Cribs/Extra Beds Available
    extraBedFee              Int? // Additional Fees for Cribs/Extra Beds
    breakFastProvided        Boolean? // Breakfast Provided
    breakfastType            String? // ☐ Buffet, ☐ Gluten-free, ☐ Vegan, ☐ Vegetarian, ☐ Other (Text Field)
    breakfastFeeAdult        Int? // Breakfast Fee for Adults
    breakfastFeeChild        Int? // Breakfast Fee for Children
    breakfastIncluded        Boolean? // Breakfast Included in Room Rate
    depositRequired          Boolean? // Deposit Required
    depositMethods           String? // ☐ Credit Card, ☐ Debit Card, ☐ Cash, ☐ Other (Text Field)
    paymentMethods           String? // ☐ JCB, ☐ Union Pay, ☐ Visa, ☐ Mastercard, ☐ American Express, ☐ Other (Text Field)
    petsAllowed              Boolean? // Pets Allowed
    serviceAnimalsAllowed    Boolean? // Service Animals Allowed
    minAgeForPrimary         Int? // Minimum Age for Primary Guest
    hostId                   String?
    createdAt                DateTime          @default(now())
    updatedAt                DateTime          @updatedAt
    host                     Host?             @relation(fields: [hostId], references: [id])
    retreats                 Retreat[]
    programs                 Program[]
    rooms                    Room[]
    images                   Image[]
    priceMods                PriceMod[]
    amenities                PropertyAmenity[]
    reviews                  Review[]
    verified                 DateTime? // last date verified by human admin to fix scraping issues
    booking                  Booking[]
}

// The profile for a room type offered by Host, not a record of the room itself
model Room {
    id          String   @id @default(cuid())
    name        String?
    desc        String?
    images      Image[]
    type        String? // Single, Double, Suite
    roomCount   String?
    amenityList String? // make relation Air Conditioning and Heating, Wi-Fi Access, Flat-Screen TV, Mini Fridge, Coffee Maker and Tea Station, In-Room Safe, Wardrobe and Hangers, Desk and Chair, Alarm Clock, Hairdryer, Complimentary Toiletries, Bathrobe and Slippers, Iron and Ironing Board, Telephone, Room Service, Balcony or Patio (if applicable), Blackout Curtains, Extra Pillows and Blankets
    bedType     String? // Twin Bed: 39” x 75” (sleeps 1), Twin XL Bed: 39” x 80” (sleeps 1), Full Bed (Double Bed): 54” x 75” (sleeps 1-2), Queen Bed: 60” x 80” (sleeps 2), King Bed: 76” x 80” (sleeps 2), California King Bed: 72” x 84” (sleeps 2)
    minGuests   Int      @default(1)
    maxGuests   Int      @default(-1)
    property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId  String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

// Hosts would be entities like Hilton, Marriot, or Susy's B&B
model Host {
    id         String        @id @default(cuid())
    name       String?
    type       String? // Corporate, Independant, ...Something else?
    desc       String?
    email      String?
    phone      String?
    profilePic String?
    coverImg   String?
    thumbnail  String?
    userId     String?
    hostUser   HostUser[]
    images     Image[]
    retreats   Retreat[]
    properties Property[]
    priceMods  PriceMod[]
    reviews    Review[]
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    programs   Program[]
    verified   DateTime? // last date verified by human admin to fix scraping issues
    amenities  HostAmenity[]
}

// Account managers for Hosts, defaults to the user who creates host
model HostUser {
    user       User     @relation(fields: [userId], references: [id])
    userId     String // relation scalar field (used in the `@relation` attribute above)
    host       Host     @relation(fields: [hostId], references: [id])
    hostId     String // relation scalar field (used in the `@relation` attribute above)
    assignedAt DateTime @default(now())
    assignedBy String

    @@id([userId, hostId])
}

model Retreat {
    id                       String            @id @default(cuid())
    status                   String            @default("draft") // 'published', 'draft', 'archived'
    bookingType              String? // Flexible: Fixed Start Open End. Fixed: Fixed Start Fixed End. Open: Open Start Open End
    name                     String?
    category                 String            @default("") // Ayurveda, Couples & Relationships, Creative & Artistic, Detox & Cleanse, Detoxification, Emotional Healing, Family & Group Wellness, Fitness & Active, Healthy Aging, Holistic Wellness & Longevity, Hydrotherapy, Luxury Adventure, Medical Wellness, Meditation, Mental Health & Emotional Wellness, Mindfulness, Motherhood, Nutrition & Wellness Coaching, Optimal Weight, Relaxation, Sleep & Restorative Wellness, Spa, Spiritual & Self-Discovery, Traditional Healing, Therapeutic Fasting
    desc                     String            @default("Overview text") // overview
    keyBenefits              String            @default("Key benefits text")
    programApproach          String            @default("Program approach")
    whoIsthisFor             String            @default("Who is this for")
    programOptions           String            @default("Program options")
    policyCancel             String            @default("Policy cancel")
    transportationAndParking String            @default("Transportation and parking")
    policyPet                String            @default("Pet policy")
    duration                 String            @default("1 Night")
    date                     DateTime?
    minGuests                Int?              @default(1)
    maxGuests                Int?              @default(-1)
    sourceUrl                String?
    images                   Image[]
    host                     Host?             @relation(fields: [hostId], references: [id])
    hostId                   String?
    property                 Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId               String
    createdAt                DateTime          @default(now())
    updatedAt                DateTime          @updatedAt
    reviews                  Review[]
    retreatInstances         RetreatInstance[]
    verified                 DateTime? // last date verified by human admin to fix scraping issues
    priceMods                PriceMod[]
    amenities                RetreatAmenity[]
}

model Program {
    id                       String            @id @default(cuid())
    status                   String            @default("draft") // 'published', 'draft', 'archived'
    bookingType              String? // Flexible: Fixed Start Open End. Fixed: Fixed Start Fixed End. Open: Open Start Open End
    name                     String?
    category                 String            @default("") // Ayurveda, Couples & Relationships, Creative & Artistic, Detox & Cleanse, Detoxification, Emotional Healing, Family & Group Wellness, Fitness & Active, Healthy Aging, Holistic Wellness & Longevity, Hydrotherapy, Luxury Adventure, Medical Wellness, Meditation, Mental Health & Emotional Wellness, Mindfulness, Motherhood, Nutrition & Wellness Coaching, Optimal Weight, Relaxation, Sleep & Restorative Wellness, Spa, Spiritual & Self-Discovery, Traditional Healing, Therapeutic Fasting
    desc                     String            @default("Overview text") // overview
    keyBenefits              String            @default("Key benefits text")
    programApproach          String            @default("Program approach")
    whoIsthisFor             String            @default("Who is this for")
    programOptions           String            @default("Program options")
    policyCancel             String            @default("Policy cancel")
    transportationAndParking String            @default("Transportation and parking")
    policyPet                String            @default("Pet policy")
    duration                 String            @default("1 Night")
    date                     DateTime?
    minGuests                Int?              @default(1)
    maxGuests                Int?              @default(-1)
    sourceUrl                String?
    images                   Image[]
    host                     Host?             @relation(fields: [hostId], references: [id])
    hostId                   String?
    property                 Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId               String
    createdAt                DateTime          @default(now())
    updatedAt                DateTime          @updatedAt
    reviews                  Review[]
    verified                 DateTime? // last date verified by human admin to fix scraping issues
    priceMods                PriceMod[]
    amenities                ProgramAmenity[]
    programs                 ProgramInstance[]
}

model RetreatInstance {
    id             String     @id @default(cuid())
    retreat        Retreat    @relation(fields: [retreatId], references: [id], onDelete: Cascade)
    retreatId      String
    startDate      DateTime // start and end date can both be the window of time within which a retreat may be booked, or the specific length of the retreat
    endDate        DateTime
    duration       Int        @default(0) // length in nights, using start, end, and duration to accomodate multiple booking methods.
    itinerary      String     @default("Bulleted list of items, end each point with a semicolon;") // most retreat details are in the retreat record, itinerary lists the specific differences variable length versions of a retreat
    availableSlots Int
    isFull         Boolean    @default(false)
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    bookings       Booking[]
    priceMods      PriceMod[]
}

model ProgramInstance {
    id             String     @id @default(cuid())
    program        Program    @relation(fields: [programId], references: [id], onDelete: Cascade)
    programId      String
    startDate      DateTime // start and end date can both be the window of time within which a retreat may be booked, or the specific length of the retreat
    endDate        DateTime
    duration       Int        @default(0) // length in nights, using start, end, and duration to accomodate multiple booking methods.
    itinerary      String     @default("Bulleted list of items, end each point with a semicolon;") // most retreat details are in the retreat record, itinerary lists the specific differences variable length versions of a retreat
    availableSlots Int
    isFull         Boolean    @default(false)
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    bookings       Booking[]
    priceMods      PriceMod[]
}

model Booking {
    id           String   @id @default(cuid())
    checkInDate  DateTime
    checkOutDate DateTime
    guestCount   Int
    totalPrice   String
    status       String // can be various initial stripe/booking stages, upcoming, completed or archived
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    propertyId        String?
    property          Property?        @relation(fields: [propertyId], references: [id], onDelete: SetNull)
    user              User             @relation(fields: [userId], references: [id])
    userId            String
    message           Message[]
    notification      Notification?
    retreatInstance   RetreatInstance? @relation(fields: [retreatInstanceId], references: [id])
    retreatInstanceId String?
    programInstance   ProgramInstance? @relation(fields: [programInstanceId], references: [id])
    programInstanceId String?
}

model PriceMod {
    id                String           @id @default(cuid())
    name              String           @default("Price") // Low Season, High Season, Guest Surcharge, Fancy Package, etc
    desc              String           @default("Additional description to show in a tooltip") // any additional info or terms if needed...
    type              String           @default("BASE_PRICE") // BASE_PRICE, DISCOUNT, FEE, TAX, ADDON, BASE_MOD (BASE_MOD is for seasonal pricing that is added to the base by default, addons show as separate line items in the UI)
    currency          String           @default("USD")
    value             Int              @default(0) // negative for discount, positive for additional cost
    unit              String           @default("FIXED") // type: 'FIXED', 'PERCENT'
    dateStart         DateTime? // if both null, apply to all
    dateEnd           DateTime?
    guestMin          Int? // if both null, apply to all
    guestMax          Int?
    roomType          String           @default("all") // "single", "double", "suite", etc, or "all"
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
    retreatInstance   RetreatInstance? @relation(fields: [retreatInstanceId], references: [id], onDelete: Cascade)
    retreatInstanceId String?
    program           Program?         @relation(fields: [programId], references: [id], onDelete: Cascade)
    programId         String?
    host              Host?            @relation(fields: [hostId], references: [id], onDelete: Cascade)
    hostId            String?
    retreat           Retreat?         @relation(fields: [retreatId], references: [id], onDelete: Cascade)
    retreatId         String?
    property          Property?        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId        String?
    programInstance   ProgramInstance? @relation(fields: [programInstanceId], references: [id], onDelete: Cascade)
    programInstanceId String?
}

model Payment {
    id          String   @id @default(cuid())
    bookingId   String
    paymentDate DateTime
    amount      String
    status      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Review {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    type      String // retreat, host, property
    rating    Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId String?
    host       Host?     @relation(fields: [hostId], references: [id])
    hostId     String?
    retreat    Retreat?  @relation(fields: [retreatId], references: [id])
    retreatId  String?
    program    Program?  @relation(fields: [programId], references: [id])
    programId  String?
}

model Message {
    id        String   @id @default(cuid())
    timestamp DateTime

    booking   Booking @relation(fields: [bookingId], references: [id])
    bookingId String

    sender     User     @relation(name: "sentMessages", fields: [senderId], references: [id])
    senderId   String
    receiver   User     @relation(name: "receivedMessages", fields: [receiverId], references: [id])
    receiverId String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Notification {
    id        String   @id @default(cuid())
    timestamp DateTime
    status    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
    booking   Booking  @relation(fields: [bookingId], references: [id])
    bookingId String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Image {
    id         String    @id @default(cuid())
    filePath   String
    desc       String    @default("img description")
    user       User?     @relation(fields: [userId], references: [id])
    userId     String?
    property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId String?
    program    Program?  @relation(fields: [programId], references: [id])
    programId  String?
    host       Host?     @relation(fields: [hostId], references: [id])
    hostId     String?
    retreat    Retreat?  @relation(fields: [retreatId], references: [id])
    retreatId  String?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    room       Room?     @relation(fields: [roomId], references: [id])
    roomId     String?
    order      Int       @default(0)

    @@index([userId])
    @@index([propertyId])
    @@index([hostId])
    @@index([retreatId])
}

model Amenity {
    id            String   @id @default(cuid())
    type          String // activity, facility, etc
    categoryValue String? // mind-body-practices
    categoryName  String? // Mind-Body Practices, Recreational Sports, etc
    name          String   @default("") // Tai Chi, Yoga, Sauna
    value         String   @default("") // tai-chi, sauna, etc
    custom        Boolean  @default(false) // Whether this is a custom amenity
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Relation to entities that use this amenity
    propertyAmenities PropertyAmenity[]
    hostAmenities     HostAmenity[]
    retreatAmenities  RetreatAmenity[]
    programAmenities  ProgramAmenity[]
}

model PropertyAmenity {
    property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId String
    amenity    Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
    amenityId  String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([propertyId, amenityId])
    @@index([propertyId])
    @@index([amenityId])
}

model HostAmenity {
    host      Host     @relation(fields: [hostId], references: [id], onDelete: Cascade)
    hostId    String
    amenity   Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
    amenityId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([hostId, amenityId])
    @@index([hostId])
    @@index([amenityId])
}

model RetreatAmenity {
    retreat   Retreat  @relation(fields: [retreatId], references: [id], onDelete: Cascade)
    retreatId String
    amenity   Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
    amenityId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([retreatId, amenityId])
    @@index([retreatId])
    @@index([amenityId])
}

model ProgramAmenity {
    program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
    programId String
    amenity   Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
    amenityId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([programId, amenityId])
    @@index([programId])
    @@index([amenityId])
}

// Fact Tables
// TODO: Add these later for better stat management

// User Fact:
// Number of Bookings made by the User
// Total amount spent by the User on Bookings

// Property Fact:
// Number of Bookings made for the Property
// Total amount earned from Bookings for the Property
// The average rating for the Property

// Booking Fact:
// The total price of the Booking
// Number of Nights booked
// Booking Status

// Payment Fact:
// Amount of payment made for the Booking
// Payment Status

// Review Fact:
// Rating given in the review

// Message Fact:
// Number of messages exchanged

// Notification Fact:
// Number of unread notifications
